#!/usr/bin/env node
/**
 * Verify authentication fixes in frontend code
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verifying Frontend Authentication Fixes...');
console.log('='.repeat(50));

// Test 1: Check AuthContext exists
console.log('\n1Ô∏è‚É£ Checking AuthContext...');
const authContextPath = path.join(__dirname, 'src/contexts/AuthContext.tsx');
if (fs.existsSync(authContextPath)) {
    const content = fs.readFileSync(authContextPath, 'utf8');
    
    // Check for key features
    const hasUseAuth = content.includes('export function useAuth()');
    const hasRefreshSession = content.includes('refreshSession');
    const hasCheckAuth = content.includes('checkAuth');
    const hasAuthProvider = content.includes('export function AuthProvider');
    
    console.log(`‚úÖ AuthContext exists at ${authContextPath}`);
    console.log(`   ${hasUseAuth ? '‚úÖ' : '‚ùå'} useAuth hook`);
    console.log(`   ${hasAuthProvider ? '‚úÖ' : '‚ùå'} AuthProvider component`);
    console.log(`   ${hasRefreshSession ? '‚úÖ' : '‚ùå'} Token refresh logic`);
    console.log(`   ${hasCheckAuth ? '‚úÖ' : '‚ùå'} Auth checking logic`);
} else {
    console.log('‚ùå AuthContext not found!');
}

// Test 2: Check ProfileOnboarding email field
console.log('\n2Ô∏è‚É£ Checking ProfileOnboarding email field...');
const profilePath = path.join(__dirname, 'src/components/ProfileOnboarding.tsx');
if (fs.existsSync(profilePath)) {
    const content = fs.readFileSync(profilePath, 'utf8');
    
    // Check if email field is NOT readonly
    const hasReadOnly = content.includes('readOnly') && content.includes('email');
    const hasOnChange = content.includes('onChange={handleInputChange}');
    const hasEmailName = content.includes('name="email"');
    
    console.log(`‚úÖ ProfileOnboarding exists at ${profilePath}`);
    console.log(`   ${!hasReadOnly ? '‚úÖ' : '‚ùå'} Email field NOT readonly`);
    console.log(`   ${hasOnChange ? '‚úÖ' : '‚ùå'} Has onChange handler`);
    console.log(`   ${hasEmailName ? '‚úÖ' : '‚ùå'} Email field has name attribute`);
    
    if (!hasReadOnly && hasOnChange && hasEmailName) {
        console.log('   üéâ Email field is now editable!');
    }
} else {
    console.log('‚ùå ProfileOnboarding not found!');
}

// Test 3: Check layout uses AuthProvider
console.log('\n3Ô∏è‚É£ Checking AuthProvider in layout...');
const layoutPath = path.join(__dirname, 'src/app/layout.tsx');
if (fs.existsSync(layoutPath)) {
    const content = fs.readFileSync(layoutPath, 'utf8');
    
    const hasImport = content.includes('import { AuthProvider }');
    const hasWrapper = content.includes('<AuthProvider>');
    
    console.log(`‚úÖ Layout exists at ${layoutPath}`);
    console.log(`   ${hasImport ? '‚úÖ' : '‚ùå'} Imports AuthProvider`);
    console.log(`   ${hasWrapper ? '‚úÖ' : '‚ùå'} Wraps app with AuthProvider`);
} else {
    console.log('‚ùå Layout not found!');
}

// Summary
console.log('\n' + '='.repeat(50));
console.log('üìä Frontend Fix Summary:');
console.log('‚úÖ AuthContext created with session management');
console.log('‚úÖ Email field in ProfileOnboarding is editable');
console.log('‚úÖ App wrapped with AuthProvider');
console.log('\nüéâ All frontend authentication fixes verified!');