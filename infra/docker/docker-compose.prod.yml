version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: band_platform_db
    restart: always
    environment:
      POSTGRES_DB: band_platform
      POSTGRES_USER: band_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_this_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U band_user -d band_platform"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend_network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: band_platform_redis
    restart: always
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD:-change_this_in_production}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-change_this_in_production}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend_network

  # FastAPI backend
  backend:
    build:
      context: ../../apps/backend
      dockerfile: Dockerfile
    container_name: band_platform_backend
    restart: always
    env_file:
      - ../../apps/backend/.env.production
      - ../../apps/backend/.env.local
      - /etc/soleil/oauth.env
    environment:
      - DATABASE_URL=postgresql+asyncpg://band_user:${DB_PASSWORD:-change_this_in_production}@postgres:5432/band_platform
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_this_in_production}@redis:6379/0
      - DEBUG=False
      - HOST=0.0.0.0
      - PORT=8000
    volumes:
      - ../../storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend_network
      - frontend_network

  # Next.js frontend (production build)
  frontend:
    build:
      context: ../../apps/frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: band_platform_frontend
    restart: always
    env_file:
      - ../../apps/frontend/.env.production
      - /etc/soleil/oauth.env
    depends_on:
      - backend
    networks:
      - frontend_network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: band_platform_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - ../../storage:/var/www/storage:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - certbot-www:/var/www/certbot
    depends_on:
      - backend
      - frontend
    networks:
      - frontend_network

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: band_platform_certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - certbot-www:/var/www/certbot
    depends_on:
      - nginx
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN} -d www.${DOMAIN}

  # Celery worker for background tasks
  celery_worker:
    build:
      context: ../../apps/backend
      dockerfile: Dockerfile
    container_name: band_platform_celery
    restart: always
    command: celery -A app.celery_app worker --loglevel=info --concurrency=2
    env_file:
      - ../../apps/backend/.env.production
    environment:
      - DATABASE_URL=postgresql+asyncpg://band_user:${DB_PASSWORD:-change_this_in_production}@postgres:5432/band_platform
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_this_in_production}@redis:6379/0
    volumes:
      - ../../storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_network

  # Celery beat scheduler
  celery_beat:
    build:
      context: ../../apps/backend
      dockerfile: Dockerfile
    container_name: band_platform_celery_beat
    restart: always
    command: celery -A app.celery_app beat --loglevel=info
    env_file:
      - ../../apps/backend/.env.production
    environment:
      - DATABASE_URL=postgresql+asyncpg://band_user:${DB_PASSWORD:-change_this_in_production}@postgres:5432/band_platform
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_this_in_production}@redis:6379/0
    volumes:
      - ../../storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  certbot-etc:
    driver: local
  certbot-var:
    driver: local
  certbot-www:
    driver: local

networks:
  backend_network:
    name: band_platform_backend
    driver: bridge
  frontend_network:
    name: band_platform_frontend
    driver: bridge