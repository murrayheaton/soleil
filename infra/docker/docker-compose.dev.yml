version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: band_platform_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: band_platform
      POSTGRES_USER: band_user
      POSTGRES_PASSWORD: band_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U band_user -d band_platform"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: band_platform_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI backend
  backend:
    build:
      context: ../../apps/backend
      dockerfile: Dockerfile
    container_name: band_platform_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://band_user:band_pass@postgres:5432/band_platform
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=True
      - HOST=0.0.0.0
      - PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ../../apps/backend:/app
      - ../../storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js frontend (development)
  frontend:
    build:
      context: ../../apps/frontend
      dockerfile: Dockerfile.dev
    container_name: band_platform_frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
    ports:
      - "3000:3000"
    volumes:
      - ../../apps/frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend

  # Nginx reverse proxy (production-like setup)
  nginx:
    image: nginx:alpine
    container_name: band_platform_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/sites-available:/etc/nginx/sites-available:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - ../../storage:/var/www/storage:ro
    depends_on:
      - backend
      - frontend
    profiles:
      - production

  # Celery worker for background tasks
  celery_worker:
    build:
      context: ../../apps/backend
      dockerfile: Dockerfile
    container_name: band_platform_celery
    restart: unless-stopped
    command: celery -A app.celery_app worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql+asyncpg://band_user:band_pass@postgres:5432/band_platform
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ../../apps/backend:/app
      - ../../storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - production

  # Celery beat scheduler
  celery_beat:
    build:
      context: ../../apps/backend
      dockerfile: Dockerfile
    container_name: band_platform_celery_beat
    restart: unless-stopped
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://band_user:band_pass@postgres:5432/band_platform
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ../../apps/backend:/app
      - ../../storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: band_platform_network