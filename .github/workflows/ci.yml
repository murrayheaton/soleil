name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Testing Job
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: soleil_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          cd band-platform/backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run linting
        run: |
          cd band-platform/backend
          python -m ruff check app/ --fix --exit-non-zero-on-fix
          python -m black app/ --check
          
      - name: Run type checking
        run: |
          cd band-platform/backend
          python -m mypy app/ --ignore-missing-imports
          
      - name: Run security scan
        run: |
          cd band-platform/backend
          pip install bandit
          bandit -r app/ -f json -o bandit-report.json || true
          
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/soleil_test
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test
        run: |
          cd band-platform/backend
          python -m pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            -v
            
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./band-platform/backend/coverage.xml
          flags: backend
          name: backend-coverage
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: |
            band-platform/backend/htmlcov/
            band-platform/backend/bandit-report.json

  # Frontend Testing Job
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: |
          cd band-platform/frontend
          npm ci
          
      - name: Run linting
        run: |
          cd band-platform/frontend
          npm run lint
          
      - name: Run type checking
        run: |
          cd band-platform/frontend
          npm run type-check
          
      - name: Run tests with coverage
        run: |
          cd band-platform/frontend
          npm run test:ci -- --coverage
          
      - name: Build application
        run: |
          cd band-platform/frontend
          npm run build
          
      - name: Run bundle size check
        run: |
          cd band-platform/frontend
          npm run analyze:size || true
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./band-platform/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: band-platform/frontend/dist/

  # Integration Tests Job
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: soleil_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install backend dependencies
        run: |
          cd band-platform/backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Install frontend dependencies
        run: |
          cd band-platform/frontend
          npm ci
          
      - name: Start backend server
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/soleil_test
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test
        run: |
          cd band-platform/backend
          python start_server.py &
          sleep 10  # Wait for server to start
          
      - name: Run API integration tests
        run: |
          cd band-platform/backend
          python -m pytest tests/integration/ -v
          
      - name: Run E2E tests
        run: |
          cd band-platform/frontend
          npm run test:e2e:ci || true

  # Security Scanning Job
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Code Quality Check
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  # Dependency Check
  dependency-check:
    name: Dependency License Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Python dependencies
        run: |
          cd band-platform/backend
          pip install pip-licenses
          pip-licenses --format=markdown --output-file=../../licenses-python.md
          
      - name: Check Node dependencies
        run: |
          cd band-platform/frontend
          npx license-checker --production --markdown > ../../licenses-node.md
          
      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            licenses-python.md
            licenses-node.md

  # All Tests Passed Gate
  all-tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan, code-quality]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.backend-tests.result }}" != "success" ]] || \
             [[ "${{ needs.frontend-tests.result }}" != "success" ]] || \
             [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "Some tests failed. Check the results above."
            exit 1
          fi
          echo "All tests passed successfully!"

  # Auto-merge Dependabot PRs
  auto-merge:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    needs: all-tests-passed
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    
    steps:
      - name: Auto-merge minor updates
        uses: pascalgn/merge-action@v0.15.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_METHOD: squash